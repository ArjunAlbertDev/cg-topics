---
title: Handson with Clearance Authentication
---
* This is a step by step demo clearance.
* Starting with Rails New we adding Clearance
* Authenticate with a username and a password.
* Clearance is pretty simple but doesn't support some of the complicated options
of Devise.
* We then show some steps to customize things.
* Clearance is new so I can't vouch for it. You can read the doc here: [Clearance](https://github.com/thoughtbot/clearance).
* Reference code: [Private Repository](https://github.com/pitosalas/clearancedemo)

## Create basic scaffolding

<%= code_begin %>
# Shell
rails new clearancedemo
cd clearancedemo

# Update gemfile:
gem 'clearance'
gem 'pry-byebug'
gem 'better_errors'
gem 'minitest-rails'

# Run bundler
bundle

# Shell
rails generate clearance:install`
<%= code_end %>

## Add this to config/environments/{development,test}.rb:
<%= ruby_begin %>
config.action_mailer.default_url_options = { host: 'localhost:3000' }
<%= ruby_end %>

## Update views/layouts/application.html.erb
<%= ruby_begin %>
<%% if signed_in? %>
  Signed in as: <%%= current_user.email %>
  <%%= button_to 'Sign out', sign_out_path, method: :delete %>
<%% else %>
  <%%= link_to 'Sign in', sign_in_path %>
<%% end %>
<div id="flash">
  <%% flash.each do |key, value| %>
    <div class="flash <%%= key %>"><%%= value %></div>
  <%% end %>
</div>
<%= ruby_end %>

## In the Shell
<%= code_begin %>
rails db:migrate
rails generate scaffold course name:string number:string user_id:integer
<%= code_end %>

## Update CoursesController
Now we update CoursesController to take into account the login and also to only display courses owned by the looged on user.

<%= ruby_begin %>
class CoursesController < ApplicationController
  before_action :set_course, only: [:show, :edit, :update, :destroy]
  before_action :require_login

  # GET /courses
  # GET /courses.json
  def index
    @courses = current_user.courses
  end

  # GET /courses/1
  # GET /courses/1.json
  def show
  end

  # GET /courses/new
  def new
    @course = current_user.courses.build
  end

  # GET /courses/1/edit
  def edit
  end

  # POST /courses
  # POST /courses.json
  def create
    @course = current_user.courses.build(course_params)

    respond_to do |format|
      if @course.save
        format.html { redirect_to @course, notice: 'Course was successfully created.' }
        format.json { render :show, status: :created, location: @course }
      else
        format.html { render :new }
        format.json { render json: @course.errors, status: :unprocessable_entity }
      end
    end
  end
<%= ruby_end %>

## Finally
* Add to model users.rb: `has_many :courses`
* Add to model course.rb: `belongs_to :user`
* Run in shell: `rails db:migrate; rails server`
