---
title: nT Test Interface
---
#### Test Interface

The Test Interface essentially is a set of URLs which invoke special functionality that allows your nanoTwitter to be tested from a browser, and is the foundation of the scalability testing we will be doing.

##### The Test user

There's a user that we use as part of many of the tests. We refer to the user as "testuser". When you create that user use the following attributes:

* name: testuser
* email: testuser@sample.com
* password: "password"

##### Test Data
* Url to reset and load the standard seed is: /test/reset/standard?tweets=n&users=u&follows=u
* Dataset is the standard <%= link_to_topic :nt_seed_data %>
* If necessary, you may modify the creation dates of tweets, but all the other data should be intact
* Our tests will require the complete set of records

##### Here are the URLs of the test interface

* `GET /test/reset?users=u&tweets=t`
  * Deletes all users, tweets and follows
  * Recreate TestUser
  * Imports data from standard seed data, see: <%= link_to_topic :nt_seed_data %>
    * ?users=n means to import n users from the seed data...
    * Including all the related follows (i.e. both users need to be present)
    * And all the related tweets
  * Example: `/test/reset?users=100&tweets=100
  * Returns a page that says "OK"
* `GET /test/tweet?user_id=x&tweet_count=y`
  * {x} can be the user id of some user, or the keyword testuser
  * n is how many randomly generated tweets are submitted on that users behalf
  * Returns a page that says "OK"
* `GET /test/status`
  * One page "report":
    * How many users, follows, and tweets are there
    * What is the TestUser's id
  * Example: `/test/status`
* `GET /test/validate?n=n`
  * Checks for valid processing of database back end
  * The purpose to detect that the nt back end is faithfully storing and retrieving the data
  * This is not necessarily so because a very easy kind of concurrency bug leads to cache mistakes
  * In one request, does the following process
    * Create `n` tweets using faker and the whole real back end including caching and queues and whatever else
    * Store the tweet ids and the content in memory during the test
    * Once complete, query the backend for those same ids, and check that the content is correct
    * HTTP: OK if it validates, and HTTP: ERROR if it doesn't
  

