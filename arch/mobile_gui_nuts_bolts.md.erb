---
title: Mobile App Approaches
---
## Nuts and Bolts

### Rich Client GUI JS Frameworks
* Very hot right now
* Personally not (yet) a super fan
* Awesome results, but very high investment
* Shifting sands
* Web Components: Combining appearance and behavior. Still in flux, e.g. [Component Based Web UI](http://derickbailey.com/2015/08/26/building-a-component-based-web-ui-with-modern-javascript-frameworks/)
* Examples: Ember, React, Angular, BackBone, Aurelia, and many others

### What is TurboLinks?
* Rails specific solution
* Unlike Rich JS Clients, controllers are sending html to clients
* Fights to preserve state in the browser instead of re-sending it (JS, CSS and even parts of the DOM)
* Pros/Cons
  * Stay in Rails. Far smaller incremenental investment for better web performance
  * On mobile, network delay is typically 300-700ms, so Turbolinks is not going to break the 100ms barrier

### How they work
* Create a stateful experience in the browser
* Use REST to get and store application state
* Use browser's local data store as needed to achieve disconnected experience
* Data mapping to connect data displayed in a view with data in the model
* Use a REST-like API to access data and state from the server
* In Rails world, use Rails-API

### Criteria for evaluation
* Are both iOS and Android required? How about smaller platforms?
* Is access to hardware necessary? (e.g. GPS, camera, etc)
* Is an Offline or occasionally connected scenario required?
* Is a native look and feel mandatory?
* How much effort/resources/time/money are you able to invest?
* What are the performance and responsiveness requirements?
* How will user discover, install and upgrade the application?

### Guide to performance goals
* 0.1 Second: Looks and feels instant
* 1.0 Seconds: Maximum before flow is interrupted
* 5 Seconds: Maximum before losing user's attention and focus