---
title: "Sinatra Series: Case Study"
---
* Make sure first have done <%= link_to_topic :sinatra_series_3 %>

#### Goal
* We will build a large fairly complicated example
* To illustrate more principles of Service Oriented Architectures and Sinatra

#### Non SOA Approach to scaling

<img src="/content/topics/images/soa1.png" align="right" hspace="10">

* A Web Server (aka App Server) runs your code. 
* That server is connected by network to a database server.
* There are background processes and they run on the same server
* Scaling it follows a path of least resistance

##### Scaling

<img src="/content/topics/images/soa3.png" width="350">

* As load becomes greater, capacity is added where it is needed
* A "load balancer" sends traffic to different servers
* A "cache service" like Redis reduces the number of requests to the database
* And background processes are also replicated over multiple servers
* This kind of configuration is typical of many sites
* But what happens when the database cannot carry the load by itself?
* Managing the monolithic code base itself also becomes a problem
* Test suites take longer to run.

### Case Study: Social Application
* To delve more into SOA we will be using a "Social Application"
* Here are the basics: you should be writing this app as you read
* It will be helfpul with NanoTwitter

#### User Model
* Columns
  * id: integer
  * name: string
  * email: string
  * bio: string

#### Follow Model
* Columns
  * id: integer
  * integer: user_id
  * integer: followed_user_id
* This is ultra confusing, who is following whom! 

#### Basic tests
* Because the follow/follower/following is very confusing
* Write tests to see that they work as you want
* Create the test database with, e.g., `rake rake db:drop db:migrate db:seed  RACK_ENV=test`













