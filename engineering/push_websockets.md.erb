---
title: Push processing and Web Sockets
descc: Understanding web sockets and Rails Action Cable
---
#### Push Processing and Web Sockets

##### TCP/IP in the Browser

##### Push Processing

* What is it?
* Where is it used?
* Recall HTTP is stateless
* Browser creates a new connection for each request and then closes it
* Expensive!

<img src="https://assets.ably.io/assets/concepts/http-request-response-092cc9945889e17c21adfe637dad5b4daaf1910784424000d2ad114ccd75238f.png" style="width: 80%;">

##### Web Sockets - Conceptual
* Originally the only way that a browser would talk to the server was via the address bar or forms
* There was no way for the server to initiate communication to the browser.
* Needed for: notification, live updates and other functionality
* Microsoft introduced a Javascript call which allowed a js program to initiate HTTP silently (without the screen blinking)

##### Client initiated
* Just refresh the browser
* Why was this not enough? 
* Push processing; notification
* Some early hacks
  * Long polling: leave the TCP/IP socket open
  * Not reliable and difficult
* Very bad scaling behavior!

##### Websockets
* Browser feature
* TCP/IP socket
  * Can stay open
  * Are bi-directional
* Built as an extension to HTTP
* Still pretty complex
* Libraries are built to make it easier!

##### Pusher Service
* Separate company, free accounts
* Best to look at an example: [Rails Forms Pusher Demo](https://github.com/pitosalas/forms_pusher_demo)

##### Rails Action Cable
* Javascript code libraries
* Rails feature to allow WebSockets connections
* Fairly intricate to wire up
* But not hard once you understand it
* Let's look at the code: [rails_actioncable_demo](https://github.com/pitosalas/rails_actioncable_demo)



