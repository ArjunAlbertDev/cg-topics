---
title: Setting up Vagrant on Windows computers
---
## What is Vagrant?

This is from [Wikipedia](https://en.wikipedia.org/wiki/Vagrant_(software))

<blockquote>
Vagrant is an open-source software product for building and maintaining portable virtual development environments. The core idea behind its creation lies in the fact that the environment maintenance becomes increasingly difficult in a large project with multiple technical stacks. Vagrant manages all the necessary configurations for the developers in order to avoid the unnecessary maintenance and setup time, and increases development productivity. Vagrant is written in the Ruby language, but its ecosystem supports development in almost all major languages.
</blockquote>

### Installing vagrant on your Windows Computer

1. Go to [Vagrant Downloads](https://www.vagrantup.com/downloads.html) and download Vagrant for your platform
1. Install Vagrant. It’s just a simple wizard installation.
1. Also download and install [VirtualBox](https://www.virtualbox.org/wiki/Downloads)
1. Create a folder to be your project folder.
1. `$cd` to your project folder.
<%= callout("Shared Project Folder", " This is the folder that is shared between your OS and the Vagrant OS.** It allows you to work on your project in your favourite OS and run it in Vagrant OS.") %>

### Set up the vagrant virtual box

Run following commands
<%= code_begin %>
$ vagrant init mojirsamimi/ubuntu1204
$ vagrant up
$ vagrant ssh
<%= code_end %>

### Possible errors you may encounter when running these commands

* Error: unknown encoding name - CP720 (ArgumentError)
  * Solution: run this command “$ chcp 1252”
* When you run “vagrant ssh” you may see this error
  * Error: `ssh` executable not found in any directories in the %PATH%
  * Solution: that's because you don’t have any ssh client in your machine install any ssh client in your machine and add it to your PATH variable. Or if you have Git on your machine you can use ssh included in your Git. Use the appropriate command for your platform to add git's bin directory to the path.
* When you run “vagrant up” you may see
  * Error: default: Warning: Authentication failure. Retrying…
  * Solution: follow these steps:
    * Interrupt the operation using (ctrl+c) two times
    * Run the command `$ vagrant ssh`
    * When it asks for password enter "vagrant"
    * Now that you are logged in to the guest machine, run these commands:
<%= code_begin %>
$ wget https://raw.githubusercontent.com/mitchellh/vagrant/master/keys/vagrant.pub -O ~/.ssh/authorized_keys
$ chmod 700 ~/.ssh
$ chmod 600 ~/.ssh/authorized_keys
$ chown -R vagrant:vagrant ~/.ssh
Run "$ exit" to exit the guest machine
Run "$ vagrant reload"
Finally run “$ vagrant ssh” to connect to the guest OS
<%= code_end %>

## Finally
* Your project folder (Synced folder) is “/vagrant” in your vagrant OS
  * If `$ ls /vagrant” does not work add ‘config.vm.synced_folder ".", "/vagrant"` to your Vagrant file. You can find the Vagrantfile in your project folder. And then run “vagrant reload”. You can share other folders with your Vagrant OS in this way as well.
* If you want to connect to your Vagrant OS through network the easiest way is port forwarding:
  * Add “config.vm.network :forwarded_port, guest: 80, host: 4567” to your Vagrantfile and then run “$ vagrant reload”. Note that 80 (web port) and 4567 are just examples you can forward whatever port you want. Note that the IP address for your Vagrant OS is 127.0.0.1 or localhost.
* To check if your box is outdated or not go to your project use this command “$ vagrant box outdated” and then get the last version by running “$ vagrant box update”. This will not magically update running Vagrant environments. If a Vagrant environment is already running, you will have to destroy and recreate it to acquire the new updates in the box.
<%= code_begin %>
$ vagrant destroy
$ vagrant up
<%= code_end %>

## What is installed on this box:
* rbenv, ruby 2.3.1, bundler, rake, activerecord, sinatra-activerecord, sinatra-contrib, faker, byebug, sqlite3, rack-test, database_cleaner, pg, psql, puma, minitest
* A running Postgres server with user “postgres” and password “postgres” and access to the database “development”
More documentations on www.vagrantup.com
